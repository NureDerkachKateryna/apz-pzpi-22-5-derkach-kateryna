Міністерство освіти та науки України
Харківський національний університет радіоелектроніки





Лабораторна робота №3
з дисципліни: «Архітектура програмного забезпечення»







Виконала
ст. гр. ПЗПІ-22-5
Деркач Катерина Юріївна

Перевірив 
Дашенков Д.С.




Харків 2025 
Лабораторна робота №3 

Мета: розробити front-end частину програмної системи.
У створенні веб-застосунку для догляду за шкірою було прийнято низку інженерних рішень для забезпечення масштабованості, зручності підтримки, безпеки та ефективності:
1. Розділення логіки на модулі та використання хуків. Вся бізнес-логіка винесена в окремі кастомні хуки (useAccount, useProducts), що дозволяє повторно використовувати функціонал та підтримувати принцип Separation of Concerns (розділення відповідальностей). Це полегшує тестування, відлагодження та масштабування системи.
2. Управління станом через React Query. Використано бібліотеку @tanstack/react-query для кешування запитів, повторного використання даних, та автоматичного оновлення при мутаціях. Це зменшує кількість HTTP-запитів та підвищує продуктивність UI.
3. Обробка HTTP-запитів через єдиний агент Вся HTTP-комунікація централізована в модулі agent (на основі axios), що забезпечує DRY-принцип, автоматично додає JWT-токен до запитів, має уніфіковану обробку помилок та затримки в режимі розробки.
4. Безпечна авторизація та аутентифікація. JWT-токен зберігається в localStorage і використовується у заголовках Authorization, забезпечуючи захист приватних маршрутів. При зміні токена або логіні/логауті — оновлюється кеш запитів.
5. Завантаження фото через FormData. Для завантаження фото товарів використовується FormData з Content-Type: multipart/form-data, що є стандартом для передачі файлів на сервер.
6. Масштабована обробка форм. Всі форми обробляються за допомогою react-hook-form та типізацію через FieldValues, що забезпечує гнучкість у роботі з різними полями.
Веб-застосунок має клієнт-серверну архітектуру на основі SPA (Single Page Application) та взаємодіє з сервером за допомогою HTTP-запитів. Ось як компоненти взаємодіють між собою:
1. React-компоненти та хуки (useAccount, useProducts). Компоненти інтерфейсу викликають кастомні хуки для аутентифікації користувача, завантаження/редагування/видалення товарів, оновлення профілю, взаємодії з обраними продуктами і тд.
2. Хуки та API через agent.ts
Хуки викликають методи agent (axios-агент), які здійснюють HTTP-запити до backend API. agent додає токен до кожного запиту та обробляє помилки уніфіковано.
3. agent.ts та Backend API. API запити надсилаються на сервер (через VITE_API_URL).
4. React Query та кешування і рефреш. useQuery кешує запити, а useMutation інвалідує відповідні ключі кешу після змін.
5. Toast та UI повідомлення. Для взаємодії з користувачем використано react-toastify, що сповіщає про помилки, успішні дії, авторизацію тощо.
Прийняті інженерні рішення демонструють структурований підхід до побудови фронтенд-застосунку: від чіткої архітектури запитів, до ефективного кешування та централізованої обробки помилок. Такий підхід покращує читабельність, масштабованість та стабільність всієї системи.
Також було побудовано діаграми:

 
Рисунок 1 – Діаграма компонентів
  
Рисунок 2 – Діаграма пакетів
 
Рисунок 3 – Діаграма взаємодії для ролі Dermatologist
 
Рисунок 4 – Діаграма взаємодії для ролі Customer
 
Рисунок 5 – Діаграма прецедентів для ролі Admin
 
Рисунок 6 – Діаграма прецедентів для ролі Dermatologist
 
Рисунок 7 – Діаграма прецедентів для ролі Customer

Посилання на репозиторій: https://github.com/NureDerkachKateryna/apz-pzpi-22-5-derkach-kateryna
Висновок: під час лабораторної роботи навчилася  розробляти front-end частину програмної системи.
