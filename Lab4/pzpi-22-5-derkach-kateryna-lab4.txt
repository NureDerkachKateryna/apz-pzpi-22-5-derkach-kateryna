Міністерство освіти та науки України
Харківський національний університет радіоелектроніки





Лабораторна робота №4
з дисципліни: «Архітектура програмного забезпечення»







Виконала
ст. гр. ПЗПІ-22-5
Деркач Катерина Юріївна

Перевірив 
Дашенков Д.С.




Харків 2025 
Лабораторна робота №4 

Мета: дослідити як можна масштабувати бекенд системи для роботи із великим навантаженням.

Контейнеризація є ключовою технологією сучасних архітектур, що дозволяє пакувати застосунок разом із всіма його залежностями в ізольовані середовища виконання — контейнери. Завдяки цьому забезпечується гарантована відтворюваність середовища на будь-якій інфраструктурі, що підтримує Docker-формат, а також спрощується управління життєвим циклом застосунку, оскільки розробники можуть працювати з єдиним універсальним образом замість множини конфігурацій і пакетів. У контексті масштабування бекенду це дає змогу швидко розгортати нові екземпляри сервісу задля обробки зростаючого навантаження без потреби у переналаштуванні операційної системи чи додаткових компонентів.
В рамках лабораторної роботи було реалізовано масштабування системи SkinCare Helper. По-перше, було здійснено контейнеризацію бекенду, для чого спочатку було підготовлено Dockerfile, який був автоматично сформований використовуючи базовий образ зі .NET SDK. Після успішної побудови локального образу, його образ було завантажено до Azure Container Registry (ACR) — приватного реєстру, що забезпечує захищене зберігання артефактів розгортання. Використання ACR дозволяє централізувати всі версії образів.
Наступним етапом стало розгортання образу в Azure Container Apps. У межах цього сервісу створено дві ревізії застосунку. Для першої ревізії було налаштовано прийом 80 % усього вхідного трафіку, в той час як друга ревізія обробляє решту 20 % (див. рис. 1).

 
Рисунок 1 – Розділення застосунку на revision

Далі була налаштована політика горизонтального масштабування для першої ревізії. Мінімальна кількість реплік становить одну, що гарантує доступність сервісу в умовах відсутнього трафіку, а максимальна — десять, що забезпечує можливість обробки пікових навантажень. Тригером для додавання нових реплік виступає показник одночасних активних HTTP-запитів: при перевищенні порогу в 200 concurrent requests система автоматично створює додаткову репліку до досягнення максимальної межі. Завдяки цьому ресурси розподіляються динамічно, що дозволяє уникнути як перевантаження єдиного екземпляру, так і надмірного простою при низькому навантаженні. Налаштування ревізії продемонстровано на рисунках 2-3.

 
Рисунок 2 – Налаштування масштабування першої ревізії

 
Рисунок 3 – Правило масштабування ревізії

Перевагою обраного підходу є високий рівень автоматизації та гнучкості: розробнику не потрібно вручну додавати чи видаляти екземпляри сервісу при зміні навантаження — платформа сама регулює кількість контейнерів відповідно до встановлених метрик. Використання приватного реєстру образів гарантує безпечне та швидке отримання потрібних версій застосунку.
Окрім того, існують і певні обмеження. По-перше, спрощений варіант розгортання може ускладнювати детальний моніторинг спожитих ресурсів та тонке налаштування параметрів контейнерного оточення. По-друге, при масштабуванні з нуля можливі затримки через запуск нових контейнерів (cold start), що може погіршувати час відповіді на запит. На додачу до цього, залежність від хмарного провайдера призводить до ризику раптового зростання витрат під час несподіваних сплесків трафіку. В цілому ж такий підхід дозволяє швидко розгортати й динамічно масштабувати бекенд із мінімальними зусиллями.
Для навантажувального тестування використаємо інструмент Apache JMeter. За допомогою нього надішлемо 500 одночасних запитів на отримання певних сутностей. Налаштування JMeter продемонстровано на рисунку 4.

 
Рисунок 4 – Налаштування JMeter




Після виконання 500 запитів, бачимо що кількість реплік у застосунку збільшилось на 1, що значить, що правило масштабування успішно виконалось. Оновлена кількість реплік відображена на рисунку 5.

 
Рисунок 5 – Оновлена кількість реплік застосунку

Таким чином, горизонтальне масштабування застосунку було проведено успішно за допомогою інструменту Azure Container Apps та відповідно використаних правил для масштабування реплік.
Висновок: під час лабораторної роботи навчилася  масштабувати бекенд системи для роботи із великим навантаженням.
